# -*- coding: utf-8 -*-
"""Elixir data

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z-ZoL1bMcfOTMj60N8QkzrFv7F3bEKnR
"""

import pandas as pd
import os


# Google Drive file IDs extracted
microsoft_ads_file_id = '1S3Umb85XWFMxKmGvEM8k9PpcWP-dRit2'
google_ads_file_id = '1hp4saCRnhCOYK_VJHrFaFMlK8SvUX483'
meta_ads_file_id = '1VthFjrrgmyXbVzuy6e5soW9cus8DRw94'
website_landings_file_id = '1J8ghp2dOApvgH2IB1VUJwwDf81PMXccG'

#URL
microsoft_ads_url = f'https://drive.google.com/uc?export=download&id={microsoft_ads_file_id}'
google_ads_url = f'https://drive.google.com/uc?export=download&id={google_ads_file_id}'
meta_ads_url = f'https://drive.google.com/uc?export=download&id={meta_ads_file_id}'
website_landings_url = f'https://drive.google.com/uc?export=download&id={website_landings_file_id}'

#Load
microsoft_ads_df = pd.read_csv(microsoft_ads_url)
google_ads_df = pd.read_csv(google_ads_url)
meta_ads_df = pd.read_csv(meta_ads_url)
website_landings_df = pd.read_csv(website_landings_url)

# Preview the data
print("Microsoft Ads Data:")
print(microsoft_ads_df.head())
print("\nGoogle Ads Data:")
print(google_ads_df.head())
print("\nMeta Ads Data:")
print(meta_ads_df.head())
print("\nWebsite Landings Data:")
print(website_landings_df.head())

microsoft_ads_df.fillna(0, inplace=True)
google_ads_df.fillna(0, inplace=True)
meta_ads_df.fillna(0, inplace=True)
website_landings_df.fillna(0, inplace=True)

for df in [microsoft_ads_df, google_ads_df, meta_ads_df, website_landings_df]:
    if 'date' in df.columns:
        df['date'] = pd.to_datetime(df['date'])

combined_data = pd.concat([microsoft_ads_df, google_ads_df, meta_ads_df], axis=0, ignore_index=True)

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

features = combined_data[['Cost', 'Impressions', 'Clicks']]
target = combined_data['Conversions']

X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
rmse = mean_squared_error(y_test, y_pred, squared=False)
print(f"Root Mean Squared Error: {rmse}")

total_budget = 200000
min_allocation = total_budget * 0.10

microsoft_ads_df['Channel'] = 'Microsoft'
google_ads_df['Channel'] = 'Google'
meta_ads_df['Channel'] = 'Meta'

combined_data = pd.concat([microsoft_ads_df, google_ads_df, meta_ads_df], axis=0, ignore_index=True)


channel_performance = combined_data.groupby('Channel').agg({
    'Cost': 'sum',
    'Revenue': 'sum',
    'Conversions': 'sum'
})

channel_performance['budget_allocation'] = (channel_performance['Conversions'] / channel_performance['Conversions'].sum()) * total_budget

channel_performance['budget_allocation'] = channel_performance['budget_allocation'].apply(lambda x: max(x, min_allocation))

print(channel_performance[['budget_allocation']])

channel_output = channel_performance[['budget_allocation', 'Conversions']].reset_index()

channel_output.to_csv('media_investment_plan_output.csv', index=False)

print("Final Budget Allocation and Estimated Conversions:")
print(channel_output)